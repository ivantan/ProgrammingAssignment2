p2 <- "THH"
coinseq <- ""
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while (((substrRight(coinseq, 3) != p1) | (substrRight(coinseq, 3) != p2))){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
nchar(coinseq)
coinseq <- ""
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
nchar(coinseq)
trackflipcounts <- 0
gameplays <- 20
trackgameplays <- matrix(NA, gameplays, 1)
trackgameplays
gameplays <- 20
coinseq <- ""
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
trackgameplays <- matrix(NA, gameplays, 1)
for (i in 1:gameplays){
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[i] <- nchar(coinseq)
}
average(trackgameplays)
trackgameplays
average
ave(trackgameplays)
mean(trackgameplays)
source('~/.active-rstudio-document')
trackgameplays
gameplays <- 20
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
trackgameplays <- matrix(NA, gameplays, 1)
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j] <- nchar(coinseq)
}
mean(trackgameplays)
trackgameplays
coinseq <- ""
trackgameplays <- matrix(NA, gameplays, 2)
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
trackgameplays
trackgameplays <- dataframe(NA, gameplays, 2)
trackgameplays <- data.frame(NA, gameplays, 2)
trackgameplays <- matrix(NA, gameplays, 2)
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
trackgameplays
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print("p1 wins!")
} else if (coinseq == p2){
print("p2 wins!")
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
mean(trackgameplays)
trackgameplays
mean(trackgameplays[,1])
nrow(trackgameplays)
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print(paste("p1 wins! at flip number", j))
} else if (coinseq == p2){
print(paste("p2 wins! at flip number", j))
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
mean(trackgameplays[,1])
nrow(trackgameplays)
trackgameplays
## My pattern is better than yours
#
# -ivanwj
gameplays <- 2000
faces <- c("H", "T")
p1 <- "HHH"
p2 <- "THH"
# flip function
flipsCoin <- function(old){
afterflip <- paste(old, sample(faces, 1), sep="")
return(afterflip)
}
#find last n char function
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
trackgameplays <- as.data.frame(matrix(NA, gameplays, 2))
for (j in 1:gameplays){
coinseq <- ""
# after first 3 flips - check if p1 or p2 wins
for (i in 1:3){
coinseq <- flipsCoin(coinseq)
}
if (coinseq == p1){
print(paste("p1 wins! at flip number", j))
} else if (coinseq == p2){
print(paste("p2 wins! at flip number", j))
}
# no wins after first 3 flips, moves on to more flips
while ((substrRight(coinseq, 3) != p1) & (substrRight(coinseq, 3) != p2)){
#keep fliping
coinseq <- flipsCoin(coinseq)
}
#countnumberofflips
trackgameplays[j,1] <- nchar(coinseq)
trackgameplays[j,2] <- coinseq
}
mean(trackgameplays[,1])
source('~/.active-rstudio-document')
mean(trackgameplays[,1])
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
trackgameplays
source('~/Documents/personal_codes/penny_game2.R')
trackgameplays
trackgameplays[j,2] <- coinseq
winner <- 0
c(nchar(coinseq), coinseq, winner)
source('~/.active-rstudio-document')
trackgameplays
source('~/.active-rstudio-document')
trackgameplays
sum(trackgameplays[,3] == 2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Documents/personal_codes/penny_game2.R')
source('~/Documents/personal_codes/penny_game2.R')
source('~/.active-rstudio-document')
source('~/Documents/personal_codes/penny_game2.R')
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(25)
end <- Sys.time()
end - start
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(25)
end <- Sys.time()
end - start
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(25)
end <- Sys.time()
end - start
fib <- function(n)
{
ifelse(n < 2, n, fib(n - 1) + fib(n - 2))
}
start <- Sys.time()
fib(30)
end <- Sys.time()
end - start
qunif(0.75)
library(datasets)
data(iris)
?iris
iris
colnames(iris)
iris[,"Species"]
iris[,"Species"]=="virginica"
iris[iris[,"Species"]=="virginica", ]
iris_subset <- iris[iris[,"Species"]=="virginica", ]
iris_subset[,"Sepal.Length"]
mean(iris_subset[,"Sepal.Length"])
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
colnames(mtcars)
str(mtcars)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?tapply
tapply(mtcars$hp, mtcars$cyl, mean)
hpbycyl <- tapply(mtcars$hp, mtcars$cyl, mean)
hpbycyl[1]
hpbycyl["4"]
hpbycyl["4"]-hpbycyl["8"]
abs(hpbycyl["4"]-hpbycyl["8"])
debug(ls)
ls
debug(ls)
ls
ls()
exit
exit()
debug(ls)
ls()
3
4
5
6
source('~/.active-rstudio-document')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
makeVector
?makeVector
testvector <- c(1, 2, 3, 4, 5)
testvector
makeVector(testvector)
testvector
str(testvector)
numeric(testvector)
?numeric
cachemean(testvector)
numeric(1, 2, 3)
?numeric
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
vectorfunct <- makeVector(cachemean)
vectorfunct
vectorfunct(testvector)
vectorfunct
vectorfunct(testvector())
vectorfunct(testvector(avec))
vectorfunct <- makeVector(cachemean())
vectorfunct
vectorfunct(testvector
)
makeVector(cachemean)
makeVector(cachemean(testvector))
makeVector
makeVector(testvector)
vectorfunt <- makeVector(testvector)
vectorfunt
cachemean(vectorfunt)
testvector
testvector2 <- c(3, 3, 3, 4, 4, 4)
mean(testvector2)
testvector2 <- c(3, 3, 3, 4, 4, 5)
mean(testvector2)
vectorfunt <- makeVector(testvector2)
cachemean(vectorfunt)
vectorfunt$getmean
vectorfunt <- makeVector(c(3, 3, 3, 4, 4, 5))
vectorfunt$getmean
vectorfunt$sermean
vectorfunt$setmean
vectorfunt$set
vectorfunt$get
vectorfunt$get
vectorfunt$getmean
cachemean(vectorfunt)
vectorfunt$getmean
cachemean(vectorfunt)
# example: caching the mean of a vector
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
a <- makeVector(c(10, 20, 30, 40))
a$getmean
a$getmean()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$get()
a$set()
?cor
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
setwd("~/Documents/johnhopkins/ProgrammingAssignment2")
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
print(a$get() === c(1, 2, 3, 4))
print(a$get() == c(1, 2, 3, 4))
a$get()
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/johnhopkins/ProgrammingAssignment2/cachematrix.R')
library(microbenchmark)
library("microbenchmark")
install.packages("microbenchmark")
source('~/Documents/johnhopkins/ProgrammingAssignment2/benchmarks.R')
# from https://class.coursera.org/rprog-016/forum/thread?thread_id=563
library("microbenchmark")
setwd("~/Documents/johnhopkins/ProgrammingAssignment2")
source("cachematrix.R")
a = matrix(rnorm(10*10), 10, 10)
b = matrix(rnorm(25*25), 25, 25)
c = matrix(rnorm(50*50), 50, 50)
d = matrix(rnorm(75*75), 75, 75)
e = matrix(rnorm(100*100), 100, 100)
a1 = makeCacheMatrix(a)
b1 = makeCacheMatrix(b)
c1 = makeCacheMatrix(c)
d1 = makeCacheMatrix(d)
e1 = makeCacheMatrix(e)
tm <- microbenchmark(solve(a), solve(b), solve(c), solve(d), solve(e), cacheSolve(a1), cacheSolve(b1), cacheSolve(c1), cacheSolve(d1), cacheSolve(e1), times = 100)
tm
# from https://class.coursera.org/rprog-016/forum/thread?thread_id=563
library("microbenchmark")
setwd("~/Documents/johnhopkins/ProgrammingAssignment2")
source("cachematrix.R")
a = matrix(rnorm(10*10), 10, 10)
b = matrix(rnorm(25*25), 25, 25)
c = matrix(rnorm(50*50), 50, 50)
d = matrix(rnorm(75*75), 75, 75)
e = matrix(rnorm(100*100), 100, 100)
a1 = makeCacheMatrix(a)
b1 = makeCacheMatrix(b)
c1 = makeCacheMatrix(c)
d1 = makeCacheMatrix(d)
e1 = makeCacheMatrix(e)
tm <- microbenchmark(solve(a), solve(b), solve(c), solve(d), solve(e), cacheSolve(a1), cacheSolve(b1), cacheSolve(c1), cacheSolve(d1), cacheSolve(e1), times = 100)
tm
library("ggplot2")
boxplot(tm)
boxplot(tm)
